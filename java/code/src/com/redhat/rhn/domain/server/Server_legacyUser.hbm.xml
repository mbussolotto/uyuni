<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <query name="Server.findByIdandOrgId">
        <![CDATA[from com.redhat.rhn.domain.server.Server as s where s.id = :sid and ORG_ID = :orgId]]>
    </query>

    <query name="Server.findByIdsAndOrgId">
        <![CDATA[from com.redhat.rhn.domain.server.Server as s where ORG_ID = :orgId and s.id in (:serverIds)]]>
    </query>

    <query name="Server.findByIds">
        <![CDATA[from com.redhat.rhn.domain.server.Server as s where s.id in (:serverIds)]]>
    </query>

    <query name="Server.findMinionsByServerIds">
        <![CDATA[from com.redhat.rhn.domain.server.MinionServer as s where s.id in (:serverIds)]]>
    </query>
    
     <query name="Server.listRedHatSystems">
        <![CDATA[ select s.id
                                        from com.redhat.rhn.domain.server.Server as s
                                        where s.id in (:sids) and s.serverArch.archType.label != 'sysv-solaris']]>
    </query>

    <query name="Server.listOrgSystems">
        <![CDATA[from com.redhat.rhn.domain.server.Server as s where ORG_ID = :orgId]]>
    </query>

     <query name="Server.listConfigEnabledSystems">
        <![CDATA[ select s
                                 from com.redhat.rhn.domain.server.Server as s
                                         inner join s.groups as sg
                                         inner join sg.groupType.features as f
                                         inner join s.capabilities as c
                                        where (sg.groupType is not null) and f.label='ftr_config' and c.id.capability.name like 'configfiles%']]>
    </query>

    <query name="Server.listMinionsByChannel">
        <![CDATA[ select ms
                                 from com.redhat.rhn.domain.server.MinionServer as ms
                                         inner join ms.channels as c
                                        where c.id = :cid]]>
    </query>

    <query name="Server.listFqdns">
        <![CDATA[ select name
                  from com.redhat.rhn.domain.server.ServerFQDN as fqdn
                  where fqdn.server.id = :sid]]>
    </query>

    <query name="Server.findByFqdn">
        <![CDATA[ select s
                  from com.redhat.rhn.domain.server.Server as s
                  join s.fqdns as fqdn
                  where LOWER(fqdn.name) = LOWER(:name)
        ]]>
    </query>

     <query name="Server.listConfigDiffEnabledSystems">
        <![CDATA[ select s
                      from com.redhat.rhn.domain.server.Server as s
                          inner join s.groups as sg
                          inner join sg.groupType.features as f
                          inner join s.capabilities as c
                      where (sg.groupType is not null) and f.label='ftr_config' and c.id.capability.name = 'configfiles.diff'
                      order by s.id asc
        ]]>
    </query>

    <query name="Server.findNonZypperTradClientsIds">
        <![CDATA[SELECT s.id
                 FROM Server s
                 WHERE type(s) != com.redhat.rhn.domain.server.MinionServer
                     AND s.id in (:serverIds)
                     AND NOT EXISTS (SELECT 1
                                     FROM com.redhat.rhn.domain.server.InstalledPackage as p
                                     JOIN p.name as n 
                                     JOIN p.server as s2
                                     WHERE s.id = s2.id
                                         AND n.name = 'zypper')
        ]]>
    </query>

    <query name="Server.findZypperEvr">
        <![CDATA[SELECT p.evr
                   FROM com.redhat.rhn.domain.server.InstalledPackage as p
                            JOIN p.name as n
                            JOIN p.server as s
                  WHERE s.id = :sid AND n.name = 'zypper'
        ]]>
    </query>

    <sql-query name="Server.findUnscheduledErrataByServerIds">
        <return-scalar column="serverId" type="long"/>
        <return-scalar column="errataId" type="long"/>
        <![CDATA[SELECT SNPC.server_id as serverId, E.id as errataId
                 FROM rhnErrata E, rhnServerNeededErrataCache SNPC
                 WHERE EXISTS (SELECT 1
                               FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id AND USP.server_id = SNPC.server_id)
                     AND SNPC.server_id in (:serverIds)
                     AND SNPC.errata_id = E.id
                     AND NOT EXISTS (SELECT 1
                                     FROM rhnActionErrataUpdate AEU, rhnServerAction SA, rhnActionStatus AST
                                     WHERE SA.server_id = SNPC.server_id
                                         AND SA.status = AST.id
                                         AND AST.name IN('Queued', 'Picked Up')
                                         AND AEU.action_id = SA.action_id
                                         AND AEU.errata_id = E.id )
                 ORDER BY E.id
        ]]>
    </sql-query>
    
    <sql-query name="Server.serverIdVirtualHostManagerId">
        <return-scalar column="server_id" type="long"/>
        <return-scalar column="vhmserver_id" type="long"/>
        <![CDATA[select server_id, vhmserver_id
            from suseServerVirtualHostManager
        ]]>
    </sql-query>

    <query name="MinionServer.listSSHMinionsIdsAndContactMethods">
        <![CDATA[ select s.minionId, m.label
           from com.redhat.rhn.domain.server.MinionServer as s
           inner join s.contactMethod as m
           where m.label in ('ssh-push', 'ssh-push-tunnel')
        ]]>
    </query>

    <query name="Server.findServerIdsByMinionIds">
    <![CDATA[
        SELECT s.minionId, s.id
            FROM Server AS s
            WHERE type(s) = com.redhat.rhn.domain.server.MinionServer
                AND s.minionId IN (:minionIds)
    ]]>
    </query>

    <sql-query name="Server.listMinionIdMappings">
        <return-scalar column="minion_id" type="string"/>
        <return-scalar column="server_id" type="long"/>
        <![CDATA[
         SELECT m.minion_id AS minion_id, s.id AS server_id
             FROM rhnServer s
                 JOIN suseMinionInfo m ON s.id = m.server_id
                 WHERE EXISTS (SELECT 1
                               FROM rhnUserServerPerms USP
                               WHERE USP.user_id = :user_id AND USP.server_id = s.id)
        ]]>
    </sql-query>
    
    <sql-query name="Server.listAllServersOsAndRelease">
        <![CDATA[
            SELECT DISTINCT s.os, s.release FROM rhnServer s
        ]]>
    </sql-query>

    <sql-query name="Server.findSimpleMinionsByServerIds">
        <![CDATA[
            SELECT m.server_id, m.minion_id
            FROM suseMinionInfo m
            WHERE m.server_id IN (:serverIds)
        ]]>
    </sql-query>
    
    <sql-query name="Server.lookupAdministrators">
        <![CDATA[select {wc.*}
                                                from WEB_CONTACT wc
                                                inner join rhnUserServerPerms usp on wc.id = usp.user_id
                                                inner join rhnServer S on S.id = usp.server_id
                  where
                                s.id = :sid
                                and s.org_id = :org_id
                                ]]>
                <return alias="wc" class="com.redhat.rhn.domain.user.legacy.UserImpl"/>
    </sql-query>

    <sql-query name="Server.listProxies">
        <![CDATA[select S.id
                                        from rhnServer S
                                        inner join rhnUserServerPerms USP on USP.server_id = S.id
                                        inner join rhnProxyInfo rpi on rpi.server_id = S.id
                                        where S.org_id = :orgId
                                        and USP.user_id = :userId
                                ]]>
    </sql-query>

     <sql-query name="Server.findInSet">
     <![CDATA[
         select S.*,
           case when ss.server_id is not null then 2
                when proxy.server_id is not null then 3
                when S.id is not null then 0 end as clazz_
             from rhnServer S
                     left outer join  suseMgrServerInfo SS on S.id = SS.server_id
                     left outer join  rhnProxyInfo proxy on S.id = proxy.server_id
                     inner join rhnSet ST on S.id = st.element
             where
                 ST.user_id = :userId
                 and ST.label = :label
                 and S.id not in (SELECT server_id FROM rhnProxyInfo)
           ]]>
        <return alias="S" class="com.redhat.rhn.domain.server.Server" />
    </sql-query>

    <sql-query name="Server.listErrataNamesForServers">
        <return-scalar column="errataId" type="long"/>
        <return-scalar column="serverId" type="long"/>
        <return-scalar column="advisoryName" type="string"/>
        <return-scalar column="updateTag" type="string"/>
        <return-scalar column="updateStack" type="boolean"/>
        <return-scalar column="includeSalt" type="boolean"/>
        <![CDATA[
          SELECT DISTINCT
            e.id AS errataId,
            sc.server_id AS serverId,
            e.advisory_name AS advisoryName,
            c.update_tag AS updateTag,
            CASE
              WHEN (SELECT COUNT(*) FROM rhnErrataKeyword k WHERE e.id = k.errata_id AND k.keyword = 'restart_suggested') > 0
            THEN 1
            ELSE 0
            END AS updateStack,
            CASE
              WHEN (SELECT COUNT(*) FROM rhnErrataPackage k WHERE e.id = k.errata_id AND k.package_id IN
                (SELECT id FROM rhnPackage p WHERE p.name_id IN
                  (SELECT id FROM rhnPackageName pn WHERE pn.name = 'salt' OR pn.name = 'venv-salt-minion'))) > 0
            THEN 1
            ELSE 0
            END AS includeSalt
          FROM rhnErrata e
              JOIN rhnChannelErrata ce ON e.id = ce.errata_id
              JOIN rhnChannel c ON ce.channel_id = c.id
              JOIN rhnServerChannel sc ON c.id = sc.channel_id
          WHERE e.id in (:errataIds) AND
              sc.server_id in (:serverIds)
        ]]>
    </sql-query>

    <sql-query name="Server.listNewestPkgsForServerErrata">
        <return-scalar column="serverId" type="long"/>
        <return-scalar column="packageName" type="string"/>
        <return-scalar column="packageArch" type="string"/>
        <return-scalar column="packageVersion" type="string"/>
        <![CDATA[
            WITH NewPackageForServerErrata as (
                 SELECT DISTINCT sc.server_id, pn.name, max(pevr.evr) evr, pa.label as package_arch
                   FROM rhnErrata e
                            INNER JOIN rhnErrataPackage ep ON e.id = ep.errata_id
                            INNER JOIN rhnPackage p ON ep.package_id = p.id
                            INNER JOIN rhnPackageEVR pevr ON p.evr_id = pevr.id
                            INNER JOIN rhnPackageName pn ON p.name_id = pn.id
                            INNER JOIN rhnPackageArch pa ON p.package_arch_id = pa.id

                            INNER JOIN rhnChannelErrata ce ON e.id = ce.errata_id
                            INNER JOIN rhnServerChannel sc ON (sc.channel_id = ce.channel_id AND sc.server_id in (:serverIds))
                            INNER JOIN rhnChannelPackage pc ON (pc.channel_id = sc.channel_id AND pc.package_id = p.id)

                            INNER JOIN rhnServerPackage sp ON (sp.server_id = sc.server_id AND p.name_id = sp.name_id AND p.package_arch_id = sp.package_arch_id)
                            INNER JOIN rhnPackageEVR spevr ON (sp.evr_id = spevr.id AND (pevr.evr).type = (spevr.evr).type AND pevr.evr > spevr.evr)
                          WHERE e.id in (:errataIds)
                       GROUP BY sc.server_id, pn.name, pa.label
            )
            SELECT pse.server_id AS serverId
                        , pse.name AS packageName
                        , pse.package_arch AS packageArch
                        , CASE WHEN (pse.evr).epoch IS NULL
                            THEN (pse.evr).version || '-' || (pse.evr).release
                            ELSE (pse.evr).epoch || ':' || (pse.evr).version || '-' || (pse.evr).release
                        END AS packageVersion
              FROM NewPackageForServerErrata pse
        ]]>
    </sql-query>

    <sql-query name="Server.findServerInSSMByChannel">
        <return-scalar column="serverId" type="long"/>
        <![CDATA[
            SELECT s.id AS serverId
            FROM rhnServer s
                JOIN rhnServerChannel sc ON s.id=sc.server_id AND sc.channel_id=:channel_id
                JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
        ]]>
    </sql-query>
    
    <query name="Server.filterSystemsWithPendingMaintenanceOnlyActions">
        <![CDATA[SELECT sa.server.id FROM ServerAction sa
                        WHERE sa.server.id IN (:systemIds)
                          AND sa.parentAction.actionType.maintenancemodeOnly = true
                          AND status in ( 0, 1 )]]>
    </query>

    <query name="Server.setMaintenanceScheduleToSystems">
        <![CDATA[UPDATE Server s
                    SET s.maintenanceSchedule = :schedule
                  WHERE s.id IN (:systemIds)]]>
    </query>


    <query name="Server.findServersPendingRebootAction">
        <![CDATA[SELECT distinct(sa.server.id) FROM ServerAction sa
                      WHERE sa.server.id IN (:systemIds)
                        AND sa.parentAction.actionType.label = 'reboot.reboot'
                        AND status in ( 0, 1 )]]>
    </query>

    <query name="Server.listAllServerIds">
        <![CDATA[SELECT s.id
                   FROM com.redhat.rhn.domain.server.Server AS s
               ORDER BY s.id
        ]]>
    </query>

</hibernate-mapping>
