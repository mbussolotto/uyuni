<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping
PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
    <query name="Channel.findRedHatBaseChannels">
        <![CDATA[
                from com.redhat.rhn.domain.channel.Channel as c where c.org is null
                                                and parentChannel is null order by c.name]]>
    </query>

    <sql-query name="Channel.findCompatCustomBaseChsSSMNoBase">
        <![CDATA[
    SELECT {c.*}
    FROM
        (SELECT c.id, count(s.id) cnt
         FROM rhnServer s
         JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
         LEFT JOIN rhnServerChannel sc ON sc.server_id = s.id
         JOIN rhnServerChannelArchCompat scac ON scac.server_arch_id = s.server_arch_id
         JOIN rhnChannel c ON c.channel_arch_id = scac.channel_arch_id
         WHERE c.parent_channel IS NULL
         AND sc.channel_id IS NULL
         AND (c.org_id = :org_id OR
             (C.id, C.org_id)
             IN
             (SELECT scv.id, scv.org_id
              FROM rhnSharedChannelView scv
              WHERE scv.org_trust_id = :org_id
                AND scv.parent_channel IS NULL))
        GROUP BY (c.id)) ch
    JOIN rhnChannel c ON c.id = ch.id
    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
    WHERE ch.cnt =
        (SELECT COUNT(*)
         FROM rhnSet rset
         LEFT JOIN rhnServerChannel sc ON sc.server_id = rset.element
         WHERE rset.label = 'system_list'
            AND rset.user_id = :user_id
            AND sc.channel_id IS NULL)
    ORDER BY UPPER(c.name)
        ]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findCompatCustomBaseChsSSM">
        <![CDATA[
    SELECT {c.*}
    FROM
        (SELECT c.id, count(s.id) cnt
         FROM rhnServer s
         JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
         JOIN rhnServerChannel sc ON sc.server_id = s.id AND sc.channel_id = :channel_id
         JOIN rhnServerChannelArchCompat scac ON scac.server_arch_id = s.server_arch_id
         JOIN rhnChannel c ON c.channel_arch_id = scac.channel_arch_id
         WHERE c.parent_channel IS NULL
         AND (c.org_id = :org_id OR
             (C.id, C.org_id)
             IN
             (SELECT scv.id, scv.org_id
              FROM rhnSharedChannelView scv
              WHERE scv.ORG_TRUST_ID = :org_id
                AND scv.parent_channel IS NULL))
        GROUP BY (c.id)) ch
    JOIN rhnChannel c ON c.id = ch.id
    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
    WHERE ch.cnt =
        (SELECT COUNT(*)
         FROM rhnServerChannel sc
         JOIN rhnSet rset ON rset.element = sc.server_id
         WHERE rset.label = 'system_list'
            AND rset.user_id = :user_id
            AND sc.channel_id = :channel_id)
    ORDER BY UPPER(c.name)
        ]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findCompatibleForChannelSSMInNullOrg">
        <![CDATA[
    SELECT {c.*}
    FROM
        (SELECT dcm.channel_id, COUNT(s.id) cnt
         FROM rhnServer s
         JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
         JOIN rhnServerChannel sc ON sc.server_id = s.id
         JOIN rhnServerChannelArchCompat scac ON scac.server_arch_id = s.server_arch_id
         JOIN rhnDistChannelMap dcm ON dcm.channel_arch_id = scac.channel_arch_id AND dcm.release = s.release AND dcm.org_id IS NULL
         WHERE sc.channel_id = :channel_id
         GROUP BY dcm.channel_id) ch
    JOIN rhnChannel {c} ON c.id = ch.channel_id
    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
    WHERE ch.cnt =
        (SELECT COUNT(*)
         FROM rhnServerChannel sc
         JOIN rhnSet rset ON rset.element = sc.server_id
         WHERE rset.label = 'system_list'
            AND rset.user_id = :user_id
            AND sc.channel_id = :channel_id)]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findCompatibleSSMNoBaseInNullOrg">
        <![CDATA[
    SELECT {c.*}
    FROM
        (SELECT dcm.channel_id, COUNT(s.id) cnt
         FROM rhnServer s
         JOIN rhnSet rset ON rset.element = s.id AND rset.user_id = :user_id AND rset.label = 'system_list'
         LEFT JOIN rhnServerChannel sc ON sc.server_id = s.id
         JOIN rhnServerChannelArchCompat scac ON scac.server_arch_id = s.server_arch_id
         JOIN rhnDistChannelMap dcm ON dcm.channel_arch_id = scac.channel_arch_id AND dcm.release = s.release AND dcm.org_id IS NULL
         WHERE sc.channel_id IS NULL
         GROUP BY dcm.channel_id) ch
    JOIN rhnChannel {c} ON c.id = ch.channel_id
    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
    WHERE ch.cnt =
        (SELECT COUNT(*)
         FROM rhnSet rset
         LEFT JOIN rhnServerChannel sc ON sc.server_id = rset.element
         WHERE rset.label = 'system_list'
            AND rset.user_id = :user_id
            AND sc.channel_id IS NULL)]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findChildChannelsByParentInSSM">
        <synchronize table="rhnChannel"/>
        <return-scalar column="channelId" type="long"/>
        <return-scalar column="channelName" type="string"/>
        <return-scalar column="channelOrg" type="long"/>
        <![CDATA[
    select distinct c.id as channelId, c.name as channelName, c.org_id as channelOrg
    from
                    rhnChannelFamilyMembers cfm,
                    rhnChannelFamily cf,
                    rhnServerChannelArchCompat scac,
                    rhnChannel c,
                    rhnUserServerPerms usp,
                    rhnSet st,
                    rhnServer s
    where   st.user_id = :user_id
            and st.label = 'system_list'
            and st.element = s.id
            and usp.user_id = :user_id
            and st.element = usp.server_id
            and s.server_arch_id = scac.server_arch_id
            and scac.channel_arch_id = c.channel_arch_id
            and c.id = cfm.channel_id
            and cfm.channel_family_id = cf.id
            and c.parent_channel = :parent_id
            and cf.label not in ('rhn-satellite','rhn-proxy', 'SMS', 'SMS-X86', 'SMS-Z', 'SMS-PPC', 'SMP')
            and (select deny_reason
                  from suseChannelUserRoleView scur
                  where scur.channel_id = c.id and
                    scur.user_id = :user_id and
                    scur.role = 'subscribe'
            ) is null
        ]]>
    </sql-query>

    <sql-query name="Channel.findRedHatBaseChannelsByUserId">
        <![CDATA[SELECT {c.*}
                FROM rhnChannel {c}
                    INNER JOIN suseChannelUserRoleView SCURV ON SCURV.channel_id = c.id
                    LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
                WHERE c.org_id is null
                    AND c.parent_channel is null
                    AND SCURV.user_id = :userId
                    AND SCURV.deny_reason IS NULL]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.findCustomBaseChannels">
        <![CDATA[SELECT {c.*}
                FROM suseChannelUserRoleView SCURV,
                    rhnChannel {c} left outer join rhnChannelCloned c_1_
                    ON c.id = c_1_.id
                WHERE c.id = SCURV.channel_id
                    AND SCURV.user_id = :user_id
                    AND SCURV.deny_reason IS NULL
                    AND c.org_id is not null
                    AND SCURV.role = 'subscribe'
                                AND c.parent_channel is null
                    order by C.name]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>
    <sql-query name="Channel.findSubscribableBaseChannels">
        <![CDATA[SELECT {c.*}
                 FROM suseChannelUserRoleView SCURV JOIN rhnChannel {c} ON c.id = SCURV.channel_id
                     LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
                 WHERE SCURV.user_id = :user_id
                     AND SCURV.deny_reason IS NULL
                     AND SCURV.role = 'subscribe'
                     AND c.parent_channel is null
                     ORDER BY c.name]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <query name="Channel.findAllBaseChannelsOnSatellite">
        <![CDATA[from com.redhat.rhn.domain.channel.Channel as c
                  where parentChannel is null]]>
    </query>

   <query name="Channel.listAllChildren">
        <![CDATA[
                        from com.redhat.rhn.domain.channel.Channel as c where c.parentChannel = :parent
                                                ]]>
    </query>

   <sql-query name="Channel.findByLabelAndUserId">
        <![CDATA[SELECT {c.*}
              FROM rhnChannel {c}
                LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
             WHERE c.label = :label AND
               EXISTS (SELECT 1
                  FROM suseChannelUserRoleView scur
                  WHERE scur.channel_id = c.id AND
                    scur.user_id = :userId AND
                    deny_reason IS NULL
               )
        ]]>
       <synchronize table="rhnChannel"/>
       <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

   <sql-query name="Channel.findByLabelAndOrgId">
        <![CDATA[SELECT c.*, c_1_.original_id, CASE WHEN c_1_.original_id IS NULL THEN 0 ELSE 1 END as clazz_
              FROM rhnChannel c
                LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
             WHERE c.label = :label
               AND (rhn_channel.get_org_access(c.id, :orgId) = 1
                   OR EXISTS (select id from rhnSharedChannelView scv
                               where scv.label = :label
                                 and scv.org_trust_id = :orgId)) ]]>
       <synchronize table="rhnChannel"/>
       <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <query name="Channel.findChannelIdsByLabels">
        <![CDATA[SELECT c.id
              FROM com.redhat.rhn.domain.channel.Channel c
             WHERE c.label in (:labels)]]>
    </query>

    <sql-query name="Channel.findBaseChannel">
        <![CDATA[SELECT {c.*}
              FROM rhnServerChannel sc, rhnChannel {c}
                LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
             WHERE sc.server_id = :sid
               AND sc.channel_id = c.id
               AND c.parent_channel IS NULL]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <query name="Channel.channelsWithClonableErrata">
        <![CDATA[from com.redhat.rhn.domain.channel.ClonedChannel as c where c.org = :org]]>
    </query>

    <sql-query name="Channel.packageInChannelAndErrata">
        <![CDATA[
                select cp.package_id
                  from rhnChannelPackage cp
                  join rhnErrataPackage ep
                    on ep.package_id = cp.package_id
                 where cp.channel_id = :cid
                   and ep.errata_id in (:eids)
                                   ]]>
    </sql-query>

    <sql-query name="Channel.accessibleChildChannelIds">
        <![CDATA[SELECT {c.*}
  FROM   rhnChannel c
         LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
 WHERE   parent_channel = :cid
     AND rhn_channel.get_org_access(c.id, :org_id) = 1
 UNION
 SELECT {c.*}
 FROM    rhnChannel c
 LEFT OUTER JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id,
         rhnSharedChannelView sc
 WHERE   sc.parent_channel = :cid
 AND     sc.org_trust_id = :org_id
 AND     sc.id = c.id
    ]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

    <sql-query name="Channel.verifyLabel">
        <return-scalar type="string" column="label"/>
        <synchronize table="rhnChannel"/>
        <![CDATA[select label from rhnChannel where label = :label]]>
    </sql-query>

    <sql-query name="Channel.verifyName">
        <return-scalar type="string" column="name"/>
        <synchronize table="rhnChannel"/>
        <![CDATA[select name from rhnChannel where name = :name]]>
    </sql-query>

    <sql-query name="Channel.packageByFileName">
      <![CDATA[SELECT {p.*},
          (CASE WHEN C.id = :channel_id THEN 1 ELSE 0 end) as chanprio
          FROM rhnPackage {p},
             rhnChannelPackage CP,
             rhnChannel C
             WHERE (C.id = :channel_id OR C.parent_channel = :channel_id)
               AND CP.channel_id = C.id
               AND CP.package_id = P.id
               AND P.path LIKE :pathlike
               ORDER BY chanprio DESC, p.build_time
        ]]>
        <synchronize table="rhnChannel"/>
        <synchronize table="rhnPackage"/>
        <return alias="p" class="com.redhat.rhn.domain.rhnpackage.Package" />
    </sql-query>

    <sql-query name="Channel.packageByFileNameAndRange">
	    <![CDATA[SELECT {p.*},
                            (CASE WHEN C.id = :channel_id THEN 1 ELSE 0 end) as chanprio
                       FROM rhnPackage {p},
                            rhnChannelPackage CP,
                            rhnChannel C
                      WHERE (C.id = :channel_id OR C.parent_channel = :channel_id)
                        AND CP.channel_id = C.id
                        AND CP.package_id = P.id
                        AND P.path LIKE :pathlike
                        AND P.header_start = :headerStart
	                AND P.header_end   = :headerEnd
                   ORDER BY chanprio DESC, p.build_time
        ]]>
        <synchronize table="rhnChannel"/>
        <synchronize table="rhnPackage"/>
        <return alias="p" class="com.redhat.rhn.domain.rhnpackage.Package" />
    </sql-query>

    <sql-query name="Channel.getPackageCount">
        <return-scalar type="int" column="package_count"/>
        <![CDATA[select count(*) as package_count from rhnChannelPackage cp where cp.channel_id = :cid]]>
    </sql-query>

   <sql-query name="Channel.getErrataCount">
        <return-scalar type="int" column="errata_count"/>
        <![CDATA[select count(*) as errata_count from rhnChannelErrata cp where cp.channel_id = :cid]]>
    </sql-query>

    <sql-query name="Channel.getPackageIdList">
        <return-scalar type="long" column="package_id"/>
        <![CDATA[select cp.package_id from rhnChannelPackage cp where cp.channel_id = :cid]]>
    </sql-query>

    <sql-query name="Channel.getClonedErrataOriginalIdList">
        <return-scalar type="long" column="original_id"/>
        <![CDATA[SELECT errataCloned.original_id
                    FROM rhnChannelErrata channelErrata
                    INNER JOIN rhnErrataCloned errataCloned ON errataCloned.id = channelErrata.errata_id
                    WHERE channelErrata.channel_id = :cid
        ]]>
    </sql-query>

    <sql-query name="Channel.isAccessibleBy">
        <synchronize table="rhnChannel"/>
        <return-scalar type="int" column="result"/>
         <![CDATA[SELECT case when (EXISTS (
              SELECT 1
              FROM rhnChannel c
              JOIN rhnChannelFamilyMembers cfm ON cfm.channel_id = c.id
              JOIN rhnPrivateChannelFamily pcf ON pcf.channel_family_id = cfm.channel_family_id
              WHERE c.label = :channel_label
              AND pcf.org_id = :org_id
              LIMIT 1
        ) OR EXISTS (
              SELECT 1
              FROM rhnChannel c
              JOIN rhnChannelFamilyMembers cfm ON cfm.channel_id = c.id
              JOIN rhnPublicChannelFamily pcf ON pcf.channel_family_id = cfm.channel_family_id
              WHERE c.label = :channel_label
              LIMIT 1
        ) OR EXISTS (
              SELECT 1
              FROM rhnChannel c
              JOIN rhnTrustedOrgs tr ON c.org_id = tr.org_id
              WHERE c.channel_access = 'public'
              AND c.label = :channel_label
              AND tr.org_trust_id = :org_id
              LIMIT 1
        ) OR EXISTS (
              SELECT 1
              FROM rhnChannel c
              JOIN rhnChannelTrust tr ON c.id = tr.channel_id
              WHERE c.channel_access = 'protected'
              AND c.label = :channel_label
              AND tr.org_trust_id = :org_id
              LIMIT 1
        )) then 1 else 0 end AS result
        ]]>
    </sql-query>

    <sql-query name="Channel.isAccessibleByUser">
        <synchronize table="rhnChannel"/>
        <![CDATA[SELECT 1
                   FROM rhnChannel c
                   JOIN suseChannelUserRoleView scur on c.id = scur.channel_id
                  WHERE c.label = :channelLabel
                    AND scur.user_id = :userId
                    AND scur.channel_id = c.id
                    AND deny_reason IS NULL
        ]]>
    </sql-query>

    <sql-query name="Channel.lookupOriginalPackages">
        <![CDATA[
            SELECT DISTINCT cp.package_id AS id
            FROM rhnChannelPackage cp
            LEFT OUTER JOIN (
                    SELECT ep.package_id, ep.errata_id
                    FROM rhnChannelErrata ce
                    JOIN rhnErrataPackage ep ON ep.errata_id = ce.errata_id
                    WHERE ce.channel_id = :from_cid) e ON cp.package_id = e.package_id
            WHERE cp.channel_id = :from_cid
            AND e.errata_id IS NULL
        ]]>
        <return-scalar column="id" type="long"/>
    </sql-query>

    <query name="Channel.lookupOriginal">
        <![CDATA[ select c.original
                  from com.redhat.rhn.domain.channel.ClonedChannel as c where c = :clone
        ]]>
    </query>
    <query name="Channel.findChannelArchLabelsSyncdChannels">
        <![CDATA[select distinct c.channelArch.label from com.redhat.rhn.domain.channel.Channel as c]]>
    </query>

    <query name="Channel.findCustomChannelsWithRepositories">
        <![CDATA[from com.redhat.rhn.domain.channel.Channel as c
                where c.org is not null and c.sources is not empty]]>
    </query>

    <query name="Channel.findVendorChannels">
        <![CDATA[from com.redhat.rhn.domain.channel.Channel as c
                 where c.org is null]]>
    </query>
    <sql-query name="Channel.findVendorRepositoryByChannelId">
        <![CDATA[
          SELECT DISTINCT {r.*}
            FROM rhnChannel c
            JOIN suseProductSCCRepository pr ON c.label = pr.channel_label
            JOIN suseSCCRepository r ON pr.repo_id = r.id
           WHERE c.org_id IS NULL
            AND c.id = :cid
        ]]>
        <synchronize table="rhnChannel"/>
        <return alias="r" class="com.redhat.rhn.domain.scc.SCCRepository" />
    </sql-query>
    <sql-query name="Channel.findOrphanVendorChannels">
        <![CDATA[
            SELECT {c.*}
            FROM rhnChannel c
            LEFT JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
            left join rhnChannelContentSource ccs on c.id = ccs.channel_id
            where c.org_id is NULL
            and ccs.source_id IS NULL
        ]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>
    <sql-query name="Channel.findModularChannels">
        <![CDATA[
            SELECT {c.*}
            FROM rhnChannel c
            LEFT JOIN rhnChannelCloned c_1_ ON c.id = c_1_.id
            WHERE c.org_id = :org_id
            AND c.id in (
              SELECT DISTINCT a.channel_id
              FROM suseAppstream a)
        ]]>
        <synchronize table="rhnChannel"/>
        <return alias="c" class="com.redhat.rhn.domain.channel.Channel" />
    </sql-query>

</hibernate-mapping>
